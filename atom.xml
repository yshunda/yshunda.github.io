<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>大蓝鲸</title>
  
  <subtitle>不积硅步.无以致千里</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yshunda.github.io/"/>
  <updated>2017-10-09T08:02:11.744Z</updated>
  <id>http://yshunda.github.io/</id>
  
  <author>
    <name>大蓝鲸</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Node.js学习笔记(一)</title>
    <link href="http://yshunda.github.io/2017/09/23/Node.js_A/"/>
    <id>http://yshunda.github.io/2017/09/23/Node.js_A/</id>
    <published>2017-09-23T13:37:48.000Z</published>
    <updated>2017-10-09T08:02:11.744Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>  title: Node.js学习笔记(一)<br>  date: 2017-09-23 21:37:48</p></blockquote><h4 id="Node-js是什么"><a href="#Node-js是什么" class="headerlink" title="Node,js是什么"></a>Node,js是什么</h4><p>a.Node.js是一个采用C++语言编写而成的,一个后端的Javascript运行环境（支持的系统包括*nux、Windows）,它不是一个javascript应用.<br>b.Node.js采用了Google Chrome浏览器的V8引擎，性能很好，同时还提供了很多系统级的API，如文件操作、网络编程(包括HTTP、DNS、NET、UDP、HTTPS、TLS等)等.<br>c.Node.js的设计特点是以事件驱动为核心,采用异步编程的设计思想.也就是说我们使用过程中引入了了相应的模块以后,需要根据自己的业务逻辑注册相应的回调函数.这些回调函数都是异步执行的,这意味着虽然在代码结构中,这些函数看似是依次注册的,但是它们并不依赖自身出现的顺序,而是等待相应的事件触发.</p><h4 id="Node-js发展简史"><a href="#Node-js发展简史" class="headerlink" title="Node.js发展简史"></a>Node.js发展简史</h4><p>2009年2月，Ryan Dahl在博客上宣布准备基于V8创建一个轻量级的Web服务器并提供一套库。<br>2009年5月，Ryan Dahl在GitHub上发布了最初版本的部分Node.js包，随后几个月里，有人开始使用Node.js开发应用。<br>2009年11月和2010年4月，两届JSConf大会都安排了Node.js的讲座。<br>2010年年底，Node.js获得云计算服务商Joyent资助，创始人Ryan Dahl加入Joyent全职负责Node.js的发展。<br>2011年7月，Node.js在微软的支持下发布Windows版本。<br>2012年1月，达尔离开了Node.js项目，开发工作由他的同事以及npm创始人艾萨克·施吕特（Isaac Schlueter）继续主持。<br>2014年2月，蒂莫西·费里斯（Timothy J. Fontaine）接任项目主管。</p><h4 id="Node-js开发对象类型"><a href="#Node-js开发对象类型" class="headerlink" title="Node.js开发对象类型"></a>Node.js开发对象类型</h4><ul><li>核心模块</li><li>全局对象</li><li>第三方对象 ( 自己写的/ npmJS官网上下载的)</li></ul><h4 id="Node-js核心模块"><a href="#Node-js核心模块" class="headerlink" title="Node.js核心模块"></a>Node.js核心模块</h4><ul><li>使用方法:”声明引入对象”   例如:引入文件操作对象<code>cosnt fs = require(&#39;fs&#39;)</code></li><li>注意:所有的API都提供了同步和异步的两个版本，<ul><li>同步会阻塞后续代码执行</li><li>异步不会阻塞后续代码执行，nodejs官方建议我们更多的使用异步的</li></ul></li></ul><h4 id="Node-js全局对象"><a href="#Node-js全局对象" class="headerlink" title="Node.js全局对象"></a>Node.js全局对象</h4><ul><li>setTimeout</li><li>console 控制台</li><li>process 代表当前启动Node程序的进程<ul><li>process属性<ul><li>argv 获取命令行的所有参数,默认是字符串形式,中间以空格分隔</li><li>env  获取当前系统环境变量</li></ul></li><li>process相关函数<ul><li>process.pid 获取进程id</li><li>process.kill  </li></ul></li></ul></li></ul><h4 id="Node-js第三方对象"><a href="#Node-js第三方对象" class="headerlink" title="Node.js第三方对象"></a>Node.js第三方对象</h4><ul><li>待定内容</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;  title: Node.js学习笔记(一)&lt;br&gt;  date: 2017-09-23 21:37:48&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;Node-js是什么&quot;&gt;&lt;a href=&quot;#Node-js是什么&quot; class=&quot;he
      
    
    </summary>
    
    
      <category term="Node.js" scheme="http://yshunda.github.io/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Node.js学习笔记(二)</title>
    <link href="http://yshunda.github.io/2017/09/23/Node.js_B/"/>
    <id>http://yshunda.github.io/2017/09/23/Node.js_B/</id>
    <published>2017-09-23T13:37:48.000Z</published>
    <updated>2017-10-18T12:26:04.460Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>  title: Node.js学习笔记(二)<br>  date: 2017-10-09 15:58:32</p></blockquote><h3 id="Node-js核心模块之文件系统模块fs"><a href="#Node-js核心模块之文件系统模块fs" class="headerlink" title="Node.js核心模块之文件系统模块fs"></a>Node.js核心模块之文件系统模块fs</h3><blockquote><p>fs（File System）是Node.js提供的对文件进行操作的模块，它提供了一组类似UNIX（POSIX）标准的文件操作API,这些模块中的方法均有异步和同步版本.利用fs模块,可以查询文件的统计信息/打开关闭文件/读写文件等.接下来介绍一些fs模块的常用功能:</p></blockquote><ul><li><h4 id="查询文件信息-fs-stat-path-callback"><a href="#查询文件信息-fs-stat-path-callback" class="headerlink" title="查询文件信息:fs.stat(path,callback)"></a>查询文件信息:<code>fs.stat(path,callback)</code></h4>fs.stat()方法用于查询文件信息，可以用于查询文件的大小、创建时间、权限等相关信息。fs.stat()是异步方法，还有一个同步方法fs.statSync(path)。示例如下：</li></ul><pre><code>var fs = require(&apos;fs&apos;);fs.stat(&apos;test.js&apos;, function (err, stats) {    console.log(stats);})</code></pre><p>返回结果如下:</p><pre><code>{ dev: 16777220,mode: 33188,nlink: 1,uid: 501,gid: 20,rdev: 0,blksize: 4096,ino: 78808297,size: 244,blocks: 8,atime: Wed May 27 2015 18:24:43 GMT+0800 (CST),mtime: Wed May 27 2015 18:26:25 GMT+0800 (CST),ctime: Wed May 27 2015 18:26:25 GMT+0800 (CST) }</code></pre><p><code>fs.stat(path)</code>执行后，会将stats类的实例返回给其回调函数。可以通过<code>stats</code>类中的提供方法判断文件的相关属性。例如判断是否为文件：</p><pre><code>var fs = require(&apos;fs&apos;);fs.stat(&apos;test.js&apos;, function (err, stats) {    console.log(stats.isFile());  //true})</code></pre><p><code>stats</code>类中的方法有：</p><ul><li>stats.isFile() 如果是标准文件，返回true。是目录、套接字、符号连接、或设备等返回false</li><li>stats. isDirectory() 如果是目录，返回true</li><li>stats. isBlockDevice() 如果是块设备，返回true，大多数情况下类UNIX系统的块设备都位于/dev目录下</li><li>stats. isCharacterDevice() 如果是字符设备，返回true</li><li>stats. isSymbolicLink() 如果是符号连接，返回true。（fs.lstat()方法返回的stats对象才有此方法）</li><li>stats.isFIFO() 如果是FIFO，返回true。FIFO是UNIX中的一种特殊类型的命令管道</li><li>stats. isSocket() 如果是UNIX套接字，返回true</li></ul><ul><li><h4 id="打开文件：fs-open-path-flags-mode-callback"><a href="#打开文件：fs-open-path-flags-mode-callback" class="headerlink" title="打开文件：fs.open(path, flags[, mode], callback)"></a>打开文件：<code>fs.open(path, flags[, mode], callback)</code></h4>操作文件前需要选对文件进行打开操作。<code>fs.open()</code>方法用于打开文件，打开文件后，文件描述符<code>fs</code>会调用<code>open</code>方法的回调函数，然后就可以通过文件描述符fs对文件进行读写等操作了。同步版的方法名为<code>fs.openSync(path, flags[, mode])</code>。示例如下：</li></ul><pre><code>var fs = require(&apos;fs&apos;);fs.open(&apos;./test/path.js&apos;, &apos;r&apos;, function (err, fd) {    // 可以在这里通过文件描述fs对文件进行操作});</code></pre><p><code>fs.open()</code>方法第一个参数是文件路径。每二个参数是标志位，标志位表示文件的打开模式。标志含义与UNIX中fopen的标识位相同：</p><ul><li>r 打开文本文件进行读取，数据流位置在文件起始处</li><li>r+ 打开文本文件进行读写，数据流位置在文件起始处</li><li>w 如果文件存在，将其清零，不存在创建写入文件。数据流位置在文件起始处</li><li>w+ 打开文件进行读写，如果文件存在，将其清零，不存在创建写入文件。数据流位置在文件起始处</li><li>a 打开文件写入数据，如果文件存在，将其清零，不存在创建写入文件。数据流位置在文件结尾处，此后的写操作都将数据追加到文件后面</li><li>a+ 打开文件进行文件读写，如果文件存在，将其清零，不存在创建写入文件。数据流位置在文件结尾处，此后的写操作都将数据追加到文件后面</li></ul><ul><li><h4 id="读取文件信息：fs-read-fd-buffer-offset-length-position-callback"><a href="#读取文件信息：fs-read-fd-buffer-offset-length-position-callback" class="headerlink" title="读取文件信息：fs.read(fd, buffer, offset, length, position, callback)"></a>读取文件信息：<code>fs.read(fd, buffer, offset, length, position, callback)</code></h4>文件打开后，就可以使用<code>fs.read()</code>方法进行读取，在读取前需要一个文件描述符fd，创建文件描述符fd可以使用fs.open()方法.而后创建一个用于保存文件数据的缓冲区。缓冲区数据最终会被传递到回调函数中;<br>从文件描述符fd中读取文件数据。</li></ul><ul><li><code>buffer</code>是一个缓冲区，读取的数据将会写入到这里。</li><li><code>offset</code>是开始向缓冲区 <code>buffer</code> 写入数据时的偏移量。</li><li><code>length</code>是一个整型值，指定了读取的字节数。</li><li><code>position</code>是一个整型值，指读取的文件起始位置，如果<code>position</code>为<code>null</code>，将会从文件当前的位置读取数据。</li><li><code>callback</code>中回调函数，其中包含了三个参数<code>(err, bytesRead, buffer)</code>，分别表示：错误、读取的字节数、缓冲区。<br><code>fs.read()</code>方法可以实现部分文件内容的读取。通过<code>length</code>和<code>position</code>参数可以指定读取文件内容的长度和读取内容的起始位置。示例如下：</li></ul><pre><code>var fs = require(&apos;fs&apos;);fs.open(&apos;./test/fs.js&apos;, &apos;r&apos;, function (err, fd) {    var readBuffer = new Buffer(1024),    offset = 0,    len = readBuffer.length,    filePostion = 100;    fs.read(fd, readBuffer, offset, len, filePostion, function(err, readByte){    console.log(&apos;读取数据总数：&apos;+readByte+&apos; bytes&apos; );            // ==&gt;读取数据总数：239 bytes        console.log(readBuffer.slice(0, readByte));     //数据已被填充到readBuffer中    })});</code></pre><p>上面的代码，文件打开后，会从第100个字节开始，读取其后的1024个字节的数据。读取完成后，<code>fs.read()</code>会回调最后一个回调方法，然后就可以可以处理读取到的的缓冲的数据了。</p><ul><li><h4 id="读取文件信息-另一种方式-fs-readFile-filename-options-callback"><a href="#读取文件信息-另一种方式-fs-readFile-filename-options-callback" class="headerlink" title="读取文件信息(另一种方式): fs.readFile(filename[, options], callback)"></a>读取文件信息(另一种方式): <code>fs.readFile(filename[, options], callback)</code></h4>读取文件的全部内容:</li></ul><ul><li><code>filename</code>要读取的文件。</li><li><code>options</code>一个包含以下可选值的对象<ul><li><code>encoding</code> {String | Null} 默认：<code>&#39;utf8&#39;</code></li><li><code>mode</code> {Number} 默认：<code>438</code> (aka 0666 in Octal)</li><li>flag {String} 默认：’w’</li></ul></li><li>callback回调函数有2个参数 (err, data)，参数 data 是文件的内容。如果没有指定参数encoding, 则返回值为Buffer。<br>fs.readFile()方法能且只能读取文件的全部内容，通过设置编码方式可以以字符串或Buffer的形式返回读结果。</li></ul><ul><li><h4 id="将数据写入文件fs-write"><a href="#将数据写入文件fs-write" class="headerlink" title="将数据写入文件fs.write()"></a>将数据写入文件<code>fs.write()</code></h4><code>fs.write()</code>有以下两种形式，可以将一个buffer或data字符串写入到文件描述符fd指定的文件中。同样的在写入之前需要一个文件描述符<code>fd</code>,创建文件描述符<code>fd</code>,可以使用<code>fs.open()</code>方法<br><code>fs.write(fd,buffer,offset,length[,position],callback)</code>参数如下:</li></ul><ul><li>buffer是一个缓冲区，是要写入到文件的数据。</li><li>offset用于确认buffer写入数据时的偏移量。</li><li>length是一个整型值，指定写入数据的长度。</li><li>通过offset和length可以确定buffer的哪个部分将会被写入文件。</li><li>position是一个整型值，指写入文件的起始位置，如果position为typeof position !== ‘number’，将会从文件当前的位置写入数据。</li><li>callback中回调函数，其中包含了三个参数(err, written, buffer)，分别表示：错误、写入文件的字节数、缓冲区。<br><code>fs.write(fd,data[,position[,encoding]],callback)</code> 参数如下:</li><li>data要写入文件的字符串（当写入数据不是Buffer时，将会被转为字符串）。</li><li>position是一个整型值，指写入文件的起始位置，如果position为typeof position !== ‘number’，将会从文件当前的位置写入数据。</li><li>encoding指定写入字符串的编码方式。</li><li>callback中回调函数，其中包含了三个参数(err, written, buffer)，分别表示：错误、写入文件的字节数、缓冲区。<br>提示：<code>fs.write()</code>在没有等待回调而多次操作同一个文件是不安全的。在这种情况下，强烈推荐使用<code>fs.createWriteStream()</code>方法。<br>文件打开后，可以通过 <code>fs.write()</code>方法传递一个数据缓冲区，以向打开的文件中写入数据。示例如下：</li></ul><pre><code>var fs = require(&apos;fs&apos;);fs.open(&apos;./fs.txt&apos;, &apos;a&apos;, function (err, fd) {    var writeBuffer = new Buffer(&apos;这是要写入的字符串&apos;),    offset = 0,    len = writeBuffer.length,    filePostion = null;    fs.write(fd, writeBuffer, offset, len, filePostion, function(err, readByte){    console.log(&apos;写数据总数：&apos;+readByte+&apos; bytes&apos; );            // ==&gt;写数据总数：27 bytes    })})</code></pre><p>fs.writeSync()是fs.write()方法的同步版本。</p><ul><li><h4 id="将数据写入文件-另一种方式-fs-writeFile-filename-data-options-callback"><a href="#将数据写入文件-另一种方式-fs-writeFile-filename-data-options-callback" class="headerlink" title="将数据写入文件(另一种方式):fs.writeFile(filename, data[, options], callback)"></a>将数据写入文件(另一种方式):<code>fs.writeFile(filename, data[, options], callback)</code></h4>将一个buffer或字符串写入到指定的文件中，当文件已经存在时，文件内容将会被替换。</li></ul><ul><li>filename要写入的文件。</li><li>data要写入的文件的数据，可以是一个buffer或字符串。</li><li>options一个包含以下可选值的对象<ul><li>encoding {String | Null} ，写入数据的编码方式，默认：’utf8’。如果写入数据是buffer时，这个参数会被忽略。</li><li>mode {Number} 默认：438 (aka 0666 in Octal)</li><li>flag {String} 默认：’w’<br>当写入数据是字符串时，options参数可以是一个字符串，表示字符串编码方式，如：’utf8’。</li></ul></li><li>callback回调函数有1个参数 (err)。err, 表示可能出现的错误。</li></ul><ul><li><h4 id="文件、目录的重命名-移动-：fs-rename-fs-rename-oldPath-newPath-callback"><a href="#文件、目录的重命名-移动-：fs-rename-fs-rename-oldPath-newPath-callback" class="headerlink" title="文件、目录的重命名(移动) ：fs.rename() fs.rename(oldPath, newPath, callback)"></a>文件、目录的重命名(移动) ：fs.rename() <code>fs.rename(oldPath, newPath, callback)</code></h4>这是异步版本的方法，此方法可以用于文件重命名和移动文件位置，此方法也可用于目录的操作。其回调函数中包含一个参数(err)，该参数用于捕获可能出现的异常，当操作的文件或目录不存在、目标目录不存在等情况时会出现异常。<br>示例:</li></ul><pre><code>fs.rename(&apos;./xxx.txt&apos;, &apos;/tmp/world&apos;, function (err) {    if (err) throw err;    console.log(&apos;重命名完成&apos;);})</code></pre><ul><li><h4 id="文件的删除-fs-unlink-fs-unlink-path-callback"><a href="#文件的删除-fs-unlink-fs-unlink-path-callback" class="headerlink" title="文件的删除 fs.unlink() fs.unlink(path,callback)"></a>文件的删除 fs.unlink() <code>fs.unlink(path,callback)</code></h4>这是异步版本的方法,其回调函数中包含一个参数(err)，该参数用于捕获可能出现的异常，当操作的文件不存在、操作的对象是目录等情况时会出现异常。<br>示例:</li></ul><pre><code>fs.unlink(&apos;./itbilu.com.txt&apos;, function(err) {    if (err) throw err;    console.log(&apos;文件删除成功&apos;);})</code></pre><ul><li><h4 id="目录的删除-fs-rmdir-fs-rmdir-paht-callback"><a href="#目录的删除-fs-rmdir-fs-rmdir-paht-callback" class="headerlink" title="目录的删除 fs.rmdir() fs.rmdir(paht,callback)"></a>目录的删除 fs.rmdir() <code>fs.rmdir(paht,callback)</code></h4>fs.unlink()只能用于文件的删除，当需要删除目录时，需要使用fs.rmdir()方法。其回调函数中包含一个参数(err)，该参数用于捕获可能出现的异常，当操作的目录不存在、操作的对象是文件、操作目录非空等情况时会出现异常。<br>示例:</li></ul><pre><code>fs.rmdir(&apos;/tmp/itbaidu&apos;,function(err){    if(err) throw err;    console.log(&apos;目录删除成功&apos;);})</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;  title: Node.js学习笔记(二)&lt;br&gt;  date: 2017-10-09 15:58:32&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Node-js核心模块之文件系统模块fs&quot;&gt;&lt;a href=&quot;#Node-js核心模块
      
    
    </summary>
    
    
      <category term="Node.js" scheme="http://yshunda.github.io/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>自建SSR服务器教程(Vultr)</title>
    <link href="http://yshunda.github.io/2017/09/20/Vultr/"/>
    <id>http://yshunda.github.io/2017/09/20/Vultr/</id>
    <published>2017-09-20T12:41:13.000Z</published>
    <updated>2017-10-19T11:32:14.685Z</updated>
    
    <content type="html"><![CDATA[<p>前言:每次有时候在论坛里分享SS/SSR账号的后,用过一段时间后不能用了就会有人又找我求账号,我的信箱也因此经常爆满;So,授人以鱼不如授人以”渔”,这篇帖子我们以Vultr为例。(也建议:自己学习一下,求人不如求已,这样你也多了一项技能、对吧！？文章适合小白，希望你能看完)</p><p><img src="/ImageCache/banner.png" alt="&quot;banner&quot;"></p><p>文章概述:<br>第一节:一些概念和原理<br>第二节:购买VPS服务器<br>第三节:连接部署VPS服务器<br>第四节:加速VPS服务器（谷歌BBR加速，推荐）<br>第五节:全平台翻墙指南</p><h3 id="第一节-一些概念和原理"><a href="#第一节-一些概念和原理" class="headerlink" title="第一节:一些概念和原理"></a>第一节:一些概念和原理</h3><h5 id="Shadowsocks-SS-是什么"><a href="#Shadowsocks-SS-是什么" class="headerlink" title="Shadowsocks(SS)是什么?"></a>Shadowsocks(SS)是什么?</h5><p><img src="/ImageCache/SS.png" alt="&quot;banner&quot;"></p><p>Shadowsocks是由若干人因为兴趣而制作的一个项目，主要开发者和领导者是<a href="https://github.com/Clowwindy" target="_blank" rel="external">@clowwindy</a>其作用是加密传输资料。但是也正因为它加密传输资料的特性，使得 GFW 无法精准识别，经由它传输的资料和其它普通资料的区别（如上图）。但是在2015年下半年 被“相关部门”约谈喝茶，于是被迫删除Github的源码及相关文档。</p><p><img src="/ImageCache/clowwindy.png" alt="&quot;banner&quot;"></p><p>但Shadowsocks属于开源项目，所以删除前已经有人备份，同时由另一批志愿者跟进维护原版 <a href="https://github.com/shadowsocks" target="_blank" rel="external">Shadowsocks</a> 客户端，而由此衍生的基于Shadowsocks项目的第三方项目有：<a href="https://github.com/breakwa11" target="_blank" rel="external">ShadowsocksR</a>、Shadowsocks-qt5、ShadowsocksCap等。</p><h5 id="ShadowsocksR-SSR-是什么"><a href="#ShadowsocksR-SSR-是什么" class="headerlink" title="ShadowsocksR(SSR)是什么?"></a>ShadowsocksR(SSR)是什么?</h5><p>Shadowsocks RSS,也叫SSR,是由<a href="https://twitter.com/breakwa11" target="_blank" rel="external">破娃酱</a>开发的加强版的Shadowsocks(SS)。它增加了混淆和协议两个主要功能来达到防止某墙的重放攻击和躲避QoS。虽然某墙在检测Shadowsocks(SS)流量时并不一定能认出这个到底是属于什么类型的流量，从而有可能被QoS。</p><p>补充:QoS (Quality of Service)，原本用于路由器上对某种类型的网络流量进行权重分配从而达到较好的网络使用情况。打个比方，在家里，网络电话以及游戏流量的权重较高，如果QoS分配给他们的宽带有一定高权重的情况下，即使还有一个人疯狂下载，也能保证网络电话和游戏这俩Services的流畅性（通过牺牲部分下载速度）。此处，某墙可能在部分封锁严重的地区会对SS流量进行QoS限速，但不是出于保障其他流量流畅性的目的。但如果在无QoS监视地区使用SSR，则有可能会造成访问速度上的下降。</p><h5 id="什么是-VPS-和-Vultr"><a href="#什么是-VPS-和-Vultr" class="headerlink" title="什么是 VPS 和 Vultr?"></a>什么是 VPS 和 Vultr?</h5><p>虚拟专用伺服务器(英语:Virtual private server,缩写为 VPS),是将一台服务器分割成多个虚拟专享服务器的一项技术。实现vps的技术分为容器技术和虚拟化技术。在容器或虚拟机中，每一个vps都可以分配独立公网IP地址、独立的操作系统、实现不同不同vps之间磁盘空间/内存/CPU资源/进程和系统配置的隔离,从而为用户和应用程序模拟出”独享”使用计算机资源的体验。也就是说每个VPS可以像独立服务器一样，重装操作系统，安装程序，单独重启服务器。</p><p>Vultr是一家国际知名的的VPS租赁服务商,也是现在使用人数较多的VPS服务商之一,关于其优劣可查阅此篇文章<a href="https://www.vultrclub.com/17.html" target="_blank" rel="external">“vultr vps服务器存在的7个优势及选择原因”</a>;与之相媲美的是<a href="https://bandwagonhost.com/" target="_blank" rel="external">搬瓦工</a>,之前推出的$3.99美元一年的套餐,现已成为了”传家宝”。</p><h5 id="什么是-Linux-和-SSH"><a href="#什么是-Linux-和-SSH" class="headerlink" title="什么是 Linux 和 SSH?"></a>什么是 Linux 和 SSH?</h5><p>Linux是一套开源的类似Unix操作的,支持多用户/多任务/多线程和多CPU的免费开源操作系统。它被世界上大半多服务器所采用,有大量优秀的开源软件可以安装。但是Linux没有像window一样有图形化用户界面(GUI),想要操作Linux系统需要学习一些常用的命令行(CLI命令),想深入学习Linux系统的小伙伴推荐这个网站(我也在这个上面学习中….)<a href="http://cn.linux.vbird.org/" target="_blank" rel="external">鳥哥的Linux私房菜</a>,这里列举一些常用操作：</p><pre><code>pwd 打印当前文件夹的路径cd  改变目录, 相当于 windows 下的打开文件夹ls  展示当前目录下的所有文件内容mkdir 创建目录, 创建文件夹rmdir 删除文件夹touch 创建文件rm 删除文件cat 原意是指将文件与终端输出流连接, 通俗的说输出文件内容less 或 more( Unix ) 命令可以分页的打开文件, 注意使用 q 退出echo 命令 打印&gt; 重定向, 如果文件存在, 则将文件截断, 并重新输入.&gt;&gt;  重定向. 不截断重定向ipconfig/all  查看ip信息ping IP地址    查看是否连接成功tips:注意: 换行问题:在 linux 中使用 \n 表示换行;在 windows 中使用 \r\n 表示换行注意:文件截断是指将文件的所有内容删除, 但是文件的创建时间等信息不更改</code></pre><p>SSH是一种网络协议,主要用于计算机之间的加密登录。例如：如果一个用户从本地计算机，使用SSH协议登录另一台远程计算机，我们就可以认为，这种登录时安全的，即使被中途截获密码也不会被泄露。所以，你购买了一台VPS服务器为它安装了Linux系统后，只要借助一些工具，就可以用 SSH 在你自己的 Mac/Windows电脑上(Xshell)远程登录该 VPS 了。</p><h3 id="第二节-购买VPS服务器"><a href="#第二节-购买VPS服务器" class="headerlink" title="第二节:购买VPS服务器"></a>第二节:购买VPS服务器</h3><p>点击<a href="https://www.vultr.com/?ref=7176181" target="_blank" rel="external">注册Vultr</a>注册后,确认邮件激活账号，充值后即可购买服务器。充值方式是paypal或支付宝(2017年8月30日Vutrl支持支付宝付款，最低充值10美元即70元左右），使用paypal有信用卡即可。paypal注册地址：<a href="https://www.paypal.com" target="_blank" rel="external">https://www.paypal.com</a> （paypal是国际知名的第三方支付服务商，相当于国内的支付宝。注册一下账号，绑定信用卡即可购买国外商品）。注册并充值完，在左边选择”Server”标签，点击右边的”加号”部署新的服务器</p><p><img src="/ImageCache/Vultr-1.png" alt="&quot;Vultr-1&quot;"></p><p>购买vps服务器时，服务器地址优先选择：美国硅谷（Silicon Valley）、美国达拉斯(Dallas)其次是美国洛杉矶(Los Angeles)和日本(Tokyo)的服务器</p><p><img src="/ImageCache/Vultr-2.png" alt="&quot;Vultr-2&quot;"></p><p>系统类型选择<strong>CentOS6X64</strong>位的系统(系统版本不要选的太高，不要选centos7！centos7默认的防火墙可能会干扰SSR的正常连接！)</p><p><img src="/ImageCache/Vultr-3.png" alt="&quot;Vultr-3&quot;"></p><p>根据自己的需求付款就好了,如果只供个人科学上网用的话，$5 绰绰有余。(如果你还想干其它的,那就高配置)</p><p><img src="/ImageCache/Vultr-4.png" alt="&quot;Vultr-4&quot;"></p><p>剩下都可以使用默认值。最后一项你可以根据自身需求来自定义服务器的名字和标签，以方便区分。</p><p><img src="/ImageCache/Vultr-5.png" alt="&quot;Vultr-5&quot;"></p><p><img src="/ImageCache/Vultr-6.png" alt="&quot;Vultr-6&quot;"></p><p><img src="/ImageCache/Vultr-7.png" alt="&quot;Vultr-7&quot;"></p><h3 id="第三节-连接部署VPS服务器"><a href="#第三节-连接部署VPS服务器" class="headerlink" title="第三节:连接部署VPS服务器"></a>第三节:连接部署VPS服务器</h3><h5 id="连接服务器"><a href="#连接服务器" class="headerlink" title="连接服务器"></a>连接服务器</h5><p>接下来部署服务器需要一个”SSH客户端”,上文我们在介绍SSH有提到过,如果你是Mac OS X系统请阁下自行搜索连接远程VPS的”SSH客户端”           Xshell windows版下载地址：<a href="http://rj.baidu.com/soft/detail/15201.html?ald" target="_blank" rel="external">百度软件中心Xshell</a></p><p>接下来连接服务器:依次点击”文件”→”新建”</p><p><img src="/ImageCache/Vultr-8.png" alt="&quot;Vultr-8&quot;"></p><p>软件会先后提醒你输入用户名和密码，linux系统用户名默认都是root，密码是购买服务器后的cent系统的密码</p><p><img src="/ImageCache/Vultr-9.png" alt="&quot;Vultr-9&quot;"></p><p><img src="/ImageCache/Vultr-10.png" alt="&quot;Vultr-10&quot;"></p><p>出现如下图即表示链接成功了</p><p><img src="/ImageCache/Vultr-11.png" alt="&quot;Vultr-11&quot;"></p><h5 id="部署服务器-脚本一"><a href="#部署服务器-脚本一" class="headerlink" title="部署服务器(脚本一)"></a>部署服务器(脚本一)</h5><p>脚本一:</p><pre><code>yum -y install wgetwget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.shchmod +x shadowsocksR.sh./shadowsocksR.sh 2&gt;&amp;1 | tee shadowsocksR.log</code></pre><p>复制上面的代码,粘贴进Xshell后按回车,会依次出现如下界面:</p><p><img src="/ImageCache/Vultr-12.png" alt="&quot;Vultr-12&quot;"></p><p><img src="/ImageCache/Vultr-13.png" alt="&quot;Vultr-13&quot;"></p><p><img src="/ImageCache/Vultr-14.png" alt="&quot;Vultr-14&quot;"></p><p>一路按”回车”后,出现如下界面即表示部署成功:</p><p><img src="/ImageCache/Vultr-15.png" alt="&quot;Vultr-15&quot;"></p><p>脚本一是无法修改密码/端口的,倘若要执意修改需要重新部署一遍,显得稍有些繁琐,若有此需求的小伙伴可以用脚本二方便以后想修改密码、端口什么的，而且功能更多</p><h5 id="部署服务器-脚本二"><a href="#部署服务器-脚本二" class="headerlink" title="部署服务器(脚本二)"></a>部署服务器(脚本二)</h5><p>脚本二:</p><pre><code>CentOS/Debian/Ubuntu ShadowsocksR单/多端口一键管理脚本：yum -y install wgetwget -N --no-check-certificate https://softs.fun/Bash/ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</code></pre><p>备用地址:</p><pre><code>yum -y install wgetwget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh</code></pre><p>复制以上代码,粘贴进Xshell(如果你之前有安装过,请先执行”3”,将其卸载,再执行”1”)</p><p><img src="/ImageCache/Vultr-16.png" alt="&quot;Vultr-16&quot;"></p><p>之后跟脚本一的设置基本是一样,就不一一截图赘述,出现下图即成功了:</p><p><img src="/ImageCache/Vultr-17.png" alt="&quot;Vultr-17&quot;"></p><h3 id="第四节-加速VPS服务器-谷歌BBR加速，推荐"><a href="#第四节-加速VPS服务器-谷歌BBR加速，推荐" class="headerlink" title="第四节:加速VPS服务器(谷歌BBR加速，推荐)"></a>第四节:加速VPS服务器(谷歌BBR加速，推荐)</h3><p>服务器搭好了,使用过程中可能会出现不稳定的情况,同时加速后一般速度也会有明显的提升,建议部署加速脚本。Vultr采用的框架可以装BBR加速,我们来部署谷歌BBR加速脚本：，将下面脚本复制进Xshell</p><pre><code>yum -y install wgetwget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.shchmod +x bbr.sh./bbr.sh</code></pre><p>一路按回车后，出现如下界面：”输入y”</p><p><img src="/ImageCache/Vultr-18.png" alt="&quot;Vultr-18&quot;"></p><p>至此加速完毕!</p><h3 id="第五节-全平台翻墙指南-SSR"><a href="#第五节-全平台翻墙指南-SSR" class="headerlink" title="第五节:全平台翻墙指南(SSR)"></a>第五节:全平台翻墙指南(SSR)</h3><p>window SSR客户端 <a href="https://github.com/shadowsocksr-backup/shadowsocksr-csharp/releases" target="_blank" rel="external">下载地址</a></p><p>Mac OS X SSR客户端 <a href="https://github.com/shadowsocksr-backup/ShadowsocksX-NG/releases" target="_blank" rel="external">下载地址</a></p><p>Android SSR客户端  <a href="https://github.com/shadowsocksr-backup/shadowsocksr-android/releases" target="_blank" rel="external">下载地址</a></p><p>IOS SSR客户端 推荐使用Shadowrocket俗称”小火箭” 但是其虽然在国区appstore下架,但是作者<a href="https://twitter.com/ShadowrocketApp" target="_blank" rel="external">@Shadowrocket</a>在其推特上发布了TestFlight申请,如果名额已满的话(当时我申请时名额未满),就只有去美区购买吧</p><h3 id="持续更新补充中……"><a href="#持续更新补充中……" class="headerlink" title="持续更新补充中……."></a>持续更新补充中…….</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前言:每次有时候在论坛里分享SS/SSR账号的后,用过一段时间后不能用了就会有人又找我求账号,我的信箱也因此经常爆满;So,授人以鱼不如授人以”渔”,这篇帖子我们以Vultr为例。(也建议:自己学习一下,求人不如求已,这样你也多了一项技能、对吧！？文章适合小白，希望你能看完
      
    
    </summary>
    
    
      <category term="VPS" scheme="http://yshunda.github.io/tags/VPS/"/>
    
  </entry>
  
</feed>
