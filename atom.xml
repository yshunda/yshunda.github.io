<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>大蓝鲸</title>
  
  <subtitle>不积硅步.无以致千里</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yshunda.github.io/"/>
  <updated>2017-10-09T13:27:24.835Z</updated>
  <id>http://yshunda.github.io/</id>
  
  <author>
    <name>大蓝鲸</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Node.js学习笔记(二)</title>
    <link href="http://yshunda.github.io/2017/09/23/Node.js_B/"/>
    <id>http://yshunda.github.io/2017/09/23/Node.js_B/</id>
    <published>2017-09-23T13:37:48.000Z</published>
    <updated>2017-10-09T13:27:24.835Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>  title: Node.js学习笔记(二)<br>  date: 2017-10-09 15:58:32</p></blockquote><h3 id="Node-js核心模块之文件系统模块fs"><a href="#Node-js核心模块之文件系统模块fs" class="headerlink" title="Node.js核心模块之文件系统模块fs"></a>Node.js核心模块之文件系统模块fs</h3><blockquote><p>fs（File System）是Node.js提供的对文件进行操作的模块，它提供了一组类似UNIX（POSIX）标准的文件操作API,这些模块中的方法均有异步和同步版本.利用fs模块,可以查询文件的统计信息/打开关闭文件/读写文件等.接下来介绍一些fs模块的常用功能:</p></blockquote><ul><li><h4 id="查询文件信息-fs-stat-path-callback"><a href="#查询文件信息-fs-stat-path-callback" class="headerlink" title="查询文件信息:fs.stat(path,callback)"></a>查询文件信息:<code>fs.stat(path,callback)</code></h4>fs.stat()方法用于查询文件信息，可以用于查询文件的大小、创建时间、权限等相关信息。fs.stat()是异步方法，还有一个同步方法fs.statSync(path)。示例如下：</li></ul><pre><code>var fs = require(&apos;fs&apos;);fs.stat(&apos;test.js&apos;, function (err, stats) {    console.log(stats);})</code></pre><p>返回结果如下:</p><pre><code>{ dev: 16777220,mode: 33188,nlink: 1,uid: 501,gid: 20,rdev: 0,blksize: 4096,ino: 78808297,size: 244,blocks: 8,atime: Wed May 27 2015 18:24:43 GMT+0800 (CST),mtime: Wed May 27 2015 18:26:25 GMT+0800 (CST),ctime: Wed May 27 2015 18:26:25 GMT+0800 (CST) }</code></pre><p><code>fs.stat(path)</code>执行后，会将stats类的实例返回给其回调函数。可以通过<code>stats</code>类中的提供方法判断文件的相关属性。例如判断是否为文件：</p><pre><code>var fs = require(&apos;fs&apos;);fs.stat(&apos;test.js&apos;, function (err, stats) {    console.log(stats.isFile());  //true})</code></pre><p><code>stats</code>类中的方法有：</p><ul><li>stats.isFile() 如果是标准文件，返回true。是目录、套接字、符号连接、或设备等返回false</li><li>stats. isDirectory() 如果是目录，返回true</li><li>stats. isBlockDevice() 如果是块设备，返回true，大多数情况下类UNIX系统的块设备都位于/dev目录下</li><li>stats. isCharacterDevice() 如果是字符设备，返回true</li><li>stats. isSymbolicLink() 如果是符号连接，返回true。（fs.lstat()方法返回的stats对象才有此方法）</li><li>stats.isFIFO() 如果是FIFO，返回true。FIFO是UNIX中的一种特殊类型的命令管道</li><li>stats. isSocket() 如果是UNIX套接字，返回true</li></ul><ul><li><h4 id="打开文件：fs-open-path-flags-mode-callback"><a href="#打开文件：fs-open-path-flags-mode-callback" class="headerlink" title="打开文件：fs.open(path, flags[, mode], callback)"></a>打开文件：<code>fs.open(path, flags[, mode], callback)</code></h4>操作文件前需要选对文件进行打开操作。<code>fs.open()</code>方法用于打开文件，打开文件后，文件描述符<code>fs</code>会调用<code>open</code>方法的回调函数，然后就可以通过文件描述符fs对文件进行读写等操作了。同步版的方法名为<code>fs.openSync(path, flags[, mode])</code>。示例如下：</li></ul><pre><code>var fs = require(&apos;fs&apos;);fs.open(&apos;./test/path.js&apos;, &apos;r&apos;, function (err, fd) {    // 可以在这里通过文件描述fs对文件进行操作});</code></pre><p><code>fs.open()</code>方法第一个参数是文件路径。每二个参数是标志位，标志位表示文件的打开模式。标志含义与UNIX中fopen的标识位相同：</p><ul><li>r 打开文本文件进行读取，数据流位置在文件起始处</li><li>r+ 打开文本文件进行读写，数据流位置在文件起始处</li><li>w 如果文件存在，将其清零，不存在创建写入文件。数据流位置在文件起始处</li><li>w+ 打开文件进行读写，如果文件存在，将其清零，不存在创建写入文件。数据流位置在文件起始处</li><li>a 打开文件写入数据，如果文件存在，将其清零，不存在创建写入文件。数据流位置在文件结尾处，此后的写操作都将数据追加到文件后面</li><li>a+ 打开文件进行文件读写，如果文件存在，将其清零，不存在创建写入文件。数据流位置在文件结尾处，此后的写操作都将数据追加到文件后面</li></ul><ul><li><h4 id="读取文件信息：fs-read-fd-buffer-offset-length-position-callback"><a href="#读取文件信息：fs-read-fd-buffer-offset-length-position-callback" class="headerlink" title="读取文件信息：fs.read(fd, buffer, offset, length, position, callback)"></a>读取文件信息：<code>fs.read(fd, buffer, offset, length, position, callback)</code></h4>文件打开后，就可以使用<code>fs.read()</code>方法进行读取，在读取前需要一个文件描述符fd，创建文件描述符fd可以使用fs.open()方法.而后创建一个用于保存文件数据的缓冲区。缓冲区数据最终会被传递到回调函数中;<br>从文件描述符fd中读取文件数据。</li></ul><ul><li><code>buffer</code>是一个缓冲区，读取的数据将会写入到这里。</li><li><code>offset</code>是开始向缓冲区 <code>buffer</code> 写入数据时的偏移量。</li><li><code>length</code>是一个整型值，指定了读取的字节数。</li><li><code>position</code>是一个整型值，指读取的文件起始位置，如果<code>position</code>为<code>null</code>，将会从文件当前的位置读取数据。</li><li><code>callback</code>中回调函数，其中包含了三个参数<code>(err, bytesRead, buffer)</code>，分别表示：错误、读取的字节数、缓冲区。<br><code>fs.read()</code>方法可以实现部分文件内容的读取。通过<code>length</code>和<code>position</code>参数可以指定读取文件内容的长度和读取内容的起始位置。示例如下：</li></ul><pre><code>var fs = require(&apos;fs&apos;);fs.open(&apos;./test/fs.js&apos;, &apos;r&apos;, function (err, fd) {    var readBuffer = new Buffer(1024),    offset = 0,    len = readBuffer.length,    filePostion = 100;    fs.read(fd, readBuffer, offset, len, filePostion, function(err, readByte){    console.log(&apos;读取数据总数：&apos;+readByte+&apos; bytes&apos; );            // ==&gt;读取数据总数：239 bytes        console.log(readBuffer.slice(0, readByte));     //数据已被填充到readBuffer中    })});</code></pre><p>上面的代码，文件打开后，会从第100个字节开始，读取其后的1024个字节的数据。读取完成后，<code>fs.read()</code>会回调最后一个回调方法，然后就可以可以处理读取到的的缓冲的数据了。</p><ul><li><h4 id="读取文件信息-另一种方式-fs-readFile-filename-options-callback"><a href="#读取文件信息-另一种方式-fs-readFile-filename-options-callback" class="headerlink" title="读取文件信息(另一种方式): fs.readFile(filename[, options], callback)"></a>读取文件信息(另一种方式): <code>fs.readFile(filename[, options], callback)</code></h4>读取文件的全部内容:</li></ul><ul><li><code>filename</code>要读取的文件。</li><li><code>options</code>一个包含以下可选值的对象<ul><li><code>encoding</code> {String | Null} 默认：<code>&#39;utf8&#39;</code></li><li><code>mode</code> {Number} 默认：<code>438</code> (aka 0666 in Octal)</li><li>flag {String} 默认：’w’</li></ul></li><li>callback回调函数有2个参数 (err, data)，参数 data 是文件的内容。如果没有指定参数encoding, 则返回值为Buffer。<br>fs.readFile()方法能且只能读取文件的全部内容，通过设置编码方式可以以字符串或Buffer的形式返回读结果。</li></ul><ul><li><h4 id="将数据写入文件fs-write"><a href="#将数据写入文件fs-write" class="headerlink" title="将数据写入文件fs.write()"></a>将数据写入文件<code>fs.write()</code></h4><code>fs.write()</code>有以下两种形式，可以将一个buffer或data字符串写入到文件描述符fd指定的文件中。同样的在写入之前需要一个文件描述符<code>fd</code>,创建文件描述符<code>fd</code>,可以使用<code>fs.open()</code>方法<br><code>fs.write(fd,buffer,offset,length[,position],callback)</code>参数如下:</li></ul><ul><li>buffer是一个缓冲区，是要写入到文件的数据。</li><li>offset用于确认buffer写入数据时的偏移量。</li><li>length是一个整型值，指定写入数据的长度。</li><li>通过offset和length可以确定buffer的哪个部分将会被写入文件。</li><li>position是一个整型值，指写入文件的起始位置，如果position为typeof position !== ‘number’，将会从文件当前的位置写入数据。</li><li>callback中回调函数，其中包含了三个参数(err, written, buffer)，分别表示：错误、写入文件的字节数、缓冲区。<br><code>fs.write(fd,data[,position[,encoding]],callback)</code> 参数如下:</li><li>data要写入文件的字符串（当写入数据不是Buffer时，将会被转为字符串）。</li><li>position是一个整型值，指写入文件的起始位置，如果position为typeof position !== ‘number’，将会从文件当前的位置写入数据。</li><li>encoding指定写入字符串的编码方式。</li><li>callback中回调函数，其中包含了三个参数(err, written, buffer)，分别表示：错误、写入文件的字节数、缓冲区。<br>提示：<code>fs.write()</code>在没有等待回调而多次操作同一个文件是不安全的。在这种情况下，强烈推荐使用<code>fs.createWriteStream()</code>方法。<br>文件打开后，可以通过 <code>fs.write()</code>方法传递一个数据缓冲区，以向打开的文件中写入数据。示例如下：</li></ul><pre><code>var fs = require(&apos;fs&apos;);fs.open(&apos;./fs.txt&apos;, &apos;a&apos;, function (err, fd) {    var writeBuffer = new Buffer(&apos;这是要写入的字符串&apos;),    offset = 0,    len = writeBuffer.length,    filePostion = null;    fs.write(fd, writeBuffer, offset, len, filePostion, function(err, readByte){    console.log(&apos;写数据总数：&apos;+readByte+&apos; bytes&apos; );            // ==&gt;写数据总数：27 bytes    })})</code></pre><p>fs.writeSync()是fs.write()方法的同步版本。</p><ul><li><h4 id="将数据写入文件-另一种方式-fs-writeFile-filename-data-options-callback"><a href="#将数据写入文件-另一种方式-fs-writeFile-filename-data-options-callback" class="headerlink" title="将数据写入文件(另一种方式):fs.writeFile(filename, data[, options], callback)"></a>将数据写入文件(另一种方式):<code>fs.writeFile(filename, data[, options], callback)</code></h4>将一个buffer或字符串写入到指定的文件中，当文件已经存在时，文件内容将会被替换。</li></ul><ul><li>filename要写入的文件。</li><li>data要写入的文件的数据，可以是一个buffer或字符串。</li><li>options一个包含以下可选值的对象<ul><li>encoding {String | Null} ，写入数据的编码方式，默认：’utf8’。如果写入数据是buffer时，这个参数会被忽略。</li><li>mode {Number} 默认：438 (aka 0666 in Octal)</li><li>flag {String} 默认：’w’<br>当写入数据是字符串时，options参数可以是一个字符串，表示字符串编码方式，如：’utf8’。</li></ul></li><li>callback回调函数有1个参数 (err)。err, 表示可能出现的错误。</li></ul><ul><li><h4 id="文件、目录的重命名-移动-：fs-rename-fs-rename-oldPath-newPath-callback"><a href="#文件、目录的重命名-移动-：fs-rename-fs-rename-oldPath-newPath-callback" class="headerlink" title="文件、目录的重命名(移动) ：fs.rename() fs.rename(oldPath, newPath, callback)"></a>文件、目录的重命名(移动) ：fs.rename() <code>fs.rename(oldPath, newPath, callback)</code></h4>这是异步版本的方法，此方法可以用于文件重命名和移动文件位置，此方法也可用于目录的操作。其回调函数中包含一个参数(err)，该参数用于捕获可能出现的异常，当操作的文件或目录不存在、目标目录不存在等情况时会出现异常。<br>示例:</li></ul><pre><code>fs.rename(&apos;./xxx.txt&apos;, &apos;/tmp/world&apos;, function (err) {    if (err) throw err;    console.log(&apos;重命名完成&apos;);})</code></pre><ul><li><h4 id="文件的删除-fs-unlink-fs-unlink-path-callback"><a href="#文件的删除-fs-unlink-fs-unlink-path-callback" class="headerlink" title="文件的删除 fs.unlink() fs.unlink(path,callback)"></a>文件的删除 fs.unlink() <code>fs.unlink(path,callback)</code></h4>这是异步版本的方法,其回调函数中包含一个参数(err)，该参数用于捕获可能出现的异常，当操作的文件不存在、操作的对象是目录等情况时会出现异常。<br>示例:</li></ul><pre><code>fs.unlink(&apos;./itbilu.com.txt&apos;, function(err) {    if (err) throw err;    console.log(&apos;文件删除成功&apos;);})</code></pre><ul><li><h4 id="目录的删除-fs-rmdir-fs-rmdir-paht-callback"><a href="#目录的删除-fs-rmdir-fs-rmdir-paht-callback" class="headerlink" title="目录的删除 fs.rmdir() fs.rmdir(paht,callback)"></a>目录的删除 fs.rmdir() <code>fs.rmdir(paht,callback)</code></h4>fs.unlink()只能用于文件的删除，当需要删除目录时，需要使用fs.rmdir()方法。其回调函数中包含一个参数(err)，该参数用于捕获可能出现的异常，当操作的目录不存在、操作的对象是文件、操作目录非空等情况时会出现异常。<br>示例:</li></ul><pre><code>fs.rmdir(&apos;/tmp/itbaidu&apos;,function(err){    if(err) throw err;    console.log(&apos;目录删除成功&apos;);})</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;  title: Node.js学习笔记(二)&lt;br&gt;  date: 2017-10-09 15:58:32&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Node-js核心模块之文件系统模块fs&quot;&gt;&lt;a href=&quot;#Node-js核心模块
      
    
    </summary>
    
    
      <category term="Node.js" scheme="http://yshunda.github.io/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>Node.js学习笔记(一)</title>
    <link href="http://yshunda.github.io/2017/09/23/Node.js_A/"/>
    <id>http://yshunda.github.io/2017/09/23/Node.js_A/</id>
    <published>2017-09-23T13:37:48.000Z</published>
    <updated>2017-10-09T08:02:11.744Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>  title: Node.js学习笔记(一)<br>  date: 2017-09-23 21:37:48</p></blockquote><h4 id="Node-js是什么"><a href="#Node-js是什么" class="headerlink" title="Node,js是什么"></a>Node,js是什么</h4><p>a.Node.js是一个采用C++语言编写而成的,一个后端的Javascript运行环境（支持的系统包括*nux、Windows）,它不是一个javascript应用.<br>b.Node.js采用了Google Chrome浏览器的V8引擎，性能很好，同时还提供了很多系统级的API，如文件操作、网络编程(包括HTTP、DNS、NET、UDP、HTTPS、TLS等)等.<br>c.Node.js的设计特点是以事件驱动为核心,采用异步编程的设计思想.也就是说我们使用过程中引入了了相应的模块以后,需要根据自己的业务逻辑注册相应的回调函数.这些回调函数都是异步执行的,这意味着虽然在代码结构中,这些函数看似是依次注册的,但是它们并不依赖自身出现的顺序,而是等待相应的事件触发.</p><h4 id="Node-js发展简史"><a href="#Node-js发展简史" class="headerlink" title="Node.js发展简史"></a>Node.js发展简史</h4><p>2009年2月，Ryan Dahl在博客上宣布准备基于V8创建一个轻量级的Web服务器并提供一套库。<br>2009年5月，Ryan Dahl在GitHub上发布了最初版本的部分Node.js包，随后几个月里，有人开始使用Node.js开发应用。<br>2009年11月和2010年4月，两届JSConf大会都安排了Node.js的讲座。<br>2010年年底，Node.js获得云计算服务商Joyent资助，创始人Ryan Dahl加入Joyent全职负责Node.js的发展。<br>2011年7月，Node.js在微软的支持下发布Windows版本。<br>2012年1月，达尔离开了Node.js项目，开发工作由他的同事以及npm创始人艾萨克·施吕特（Isaac Schlueter）继续主持。<br>2014年2月，蒂莫西·费里斯（Timothy J. Fontaine）接任项目主管。</p><h4 id="Node-js开发对象类型"><a href="#Node-js开发对象类型" class="headerlink" title="Node.js开发对象类型"></a>Node.js开发对象类型</h4><ul><li>核心模块</li><li>全局对象</li><li>第三方对象 ( 自己写的/ npmJS官网上下载的)</li></ul><h4 id="Node-js核心模块"><a href="#Node-js核心模块" class="headerlink" title="Node.js核心模块"></a>Node.js核心模块</h4><ul><li>使用方法:”声明引入对象”   例如:引入文件操作对象<code>cosnt fs = require(&#39;fs&#39;)</code></li><li>注意:所有的API都提供了同步和异步的两个版本，<ul><li>同步会阻塞后续代码执行</li><li>异步不会阻塞后续代码执行，nodejs官方建议我们更多的使用异步的</li></ul></li></ul><h4 id="Node-js全局对象"><a href="#Node-js全局对象" class="headerlink" title="Node.js全局对象"></a>Node.js全局对象</h4><ul><li>setTimeout</li><li>console 控制台</li><li>process 代表当前启动Node程序的进程<ul><li>process属性<ul><li>argv 获取命令行的所有参数,默认是字符串形式,中间以空格分隔</li><li>env  获取当前系统环境变量</li></ul></li><li>process相关函数<ul><li>process.pid 获取进程id</li><li>process.kill  </li></ul></li></ul></li></ul><h4 id="Node-js第三方对象"><a href="#Node-js第三方对象" class="headerlink" title="Node.js第三方对象"></a>Node.js第三方对象</h4><ul><li>待定内容</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;  title: Node.js学习笔记(一)&lt;br&gt;  date: 2017-09-23 21:37:48&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;Node-js是什么&quot;&gt;&lt;a href=&quot;#Node-js是什么&quot; class=&quot;he
      
    
    </summary>
    
    
      <category term="Node.js" scheme="http://yshunda.github.io/tags/Node-js/"/>
    
  </entry>
  
</feed>
