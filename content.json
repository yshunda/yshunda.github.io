{"meta":{"title":"大蓝鲸","subtitle":"不积硅步.无以致千里","description":null,"author":"大蓝鲸","url":"http://yshunda.github.io"},"pages":[{"title":"categories","date":"2017-10-18T12:57:03.000Z","updated":"2017-10-18T13:29:04.823Z","comments":false,"path":"categories/index.html","permalink":"http://yshunda.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2017-09-20T12:34:31.000Z","updated":"2017-09-20T12:38:04.282Z","comments":false,"path":"tags/index.html","permalink":"http://yshunda.github.io/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Node.js学习笔记(一)","slug":"Node.js_A","date":"2017-09-23T13:37:48.000Z","updated":"2017-10-09T08:02:11.744Z","comments":true,"path":"2017/09/23/Node.js_A/","link":"","permalink":"http://yshunda.github.io/2017/09/23/Node.js_A/","excerpt":"","text":"title: Node.js学习笔记(一) date: 2017-09-23 21:37:48 Node,js是什么a.Node.js是一个采用C++语言编写而成的,一个后端的Javascript运行环境（支持的系统包括*nux、Windows）,它不是一个javascript应用.b.Node.js采用了Google Chrome浏览器的V8引擎，性能很好，同时还提供了很多系统级的API，如文件操作、网络编程(包括HTTP、DNS、NET、UDP、HTTPS、TLS等)等.c.Node.js的设计特点是以事件驱动为核心,采用异步编程的设计思想.也就是说我们使用过程中引入了了相应的模块以后,需要根据自己的业务逻辑注册相应的回调函数.这些回调函数都是异步执行的,这意味着虽然在代码结构中,这些函数看似是依次注册的,但是它们并不依赖自身出现的顺序,而是等待相应的事件触发. Node.js发展简史2009年2月，Ryan Dahl在博客上宣布准备基于V8创建一个轻量级的Web服务器并提供一套库。2009年5月，Ryan Dahl在GitHub上发布了最初版本的部分Node.js包，随后几个月里，有人开始使用Node.js开发应用。2009年11月和2010年4月，两届JSConf大会都安排了Node.js的讲座。2010年年底，Node.js获得云计算服务商Joyent资助，创始人Ryan Dahl加入Joyent全职负责Node.js的发展。2011年7月，Node.js在微软的支持下发布Windows版本。2012年1月，达尔离开了Node.js项目，开发工作由他的同事以及npm创始人艾萨克·施吕特（Isaac Schlueter）继续主持。2014年2月，蒂莫西·费里斯（Timothy J. Fontaine）接任项目主管。 Node.js开发对象类型 核心模块 全局对象 第三方对象 ( 自己写的/ npmJS官网上下载的) Node.js核心模块 使用方法:”声明引入对象” 例如:引入文件操作对象cosnt fs = require(&#39;fs&#39;) 注意:所有的API都提供了同步和异步的两个版本， 同步会阻塞后续代码执行 异步不会阻塞后续代码执行，nodejs官方建议我们更多的使用异步的 Node.js全局对象 setTimeout console 控制台 process 代表当前启动Node程序的进程 process属性 argv 获取命令行的所有参数,默认是字符串形式,中间以空格分隔 env 获取当前系统环境变量 process相关函数 process.pid 获取进程id process.kill Node.js第三方对象 待定内容","categories":[],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"http://yshunda.github.io/tags/Node-js/"}]},{"title":"Node.js学习笔记(二)","slug":"Node.js_B","date":"2017-09-23T13:37:48.000Z","updated":"2017-10-18T12:26:04.460Z","comments":true,"path":"2017/09/23/Node.js_B/","link":"","permalink":"http://yshunda.github.io/2017/09/23/Node.js_B/","excerpt":"","text":"title: Node.js学习笔记(二) date: 2017-10-09 15:58:32 Node.js核心模块之文件系统模块fs fs（File System）是Node.js提供的对文件进行操作的模块，它提供了一组类似UNIX（POSIX）标准的文件操作API,这些模块中的方法均有异步和同步版本.利用fs模块,可以查询文件的统计信息/打开关闭文件/读写文件等.接下来介绍一些fs模块的常用功能: 查询文件信息:fs.stat(path,callback)fs.stat()方法用于查询文件信息，可以用于查询文件的大小、创建时间、权限等相关信息。fs.stat()是异步方法，还有一个同步方法fs.statSync(path)。示例如下： var fs = require(&apos;fs&apos;); fs.stat(&apos;test.js&apos;, function (err, stats) { console.log(stats); }) 返回结果如下: { dev: 16777220, mode: 33188, nlink: 1, uid: 501, gid: 20, rdev: 0, blksize: 4096, ino: 78808297, size: 244, blocks: 8, atime: Wed May 27 2015 18:24:43 GMT+0800 (CST), mtime: Wed May 27 2015 18:26:25 GMT+0800 (CST), ctime: Wed May 27 2015 18:26:25 GMT+0800 (CST) } fs.stat(path)执行后，会将stats类的实例返回给其回调函数。可以通过stats类中的提供方法判断文件的相关属性。例如判断是否为文件： var fs = require(&apos;fs&apos;); fs.stat(&apos;test.js&apos;, function (err, stats) { console.log(stats.isFile()); //true }) stats类中的方法有： stats.isFile() 如果是标准文件，返回true。是目录、套接字、符号连接、或设备等返回false stats. isDirectory() 如果是目录，返回true stats. isBlockDevice() 如果是块设备，返回true，大多数情况下类UNIX系统的块设备都位于/dev目录下 stats. isCharacterDevice() 如果是字符设备，返回true stats. isSymbolicLink() 如果是符号连接，返回true。（fs.lstat()方法返回的stats对象才有此方法） stats.isFIFO() 如果是FIFO，返回true。FIFO是UNIX中的一种特殊类型的命令管道 stats. isSocket() 如果是UNIX套接字，返回true 打开文件：fs.open(path, flags[, mode], callback)操作文件前需要选对文件进行打开操作。fs.open()方法用于打开文件，打开文件后，文件描述符fs会调用open方法的回调函数，然后就可以通过文件描述符fs对文件进行读写等操作了。同步版的方法名为fs.openSync(path, flags[, mode])。示例如下： var fs = require(&apos;fs&apos;); fs.open(&apos;./test/path.js&apos;, &apos;r&apos;, function (err, fd) { // 可以在这里通过文件描述fs对文件进行操作 }); fs.open()方法第一个参数是文件路径。每二个参数是标志位，标志位表示文件的打开模式。标志含义与UNIX中fopen的标识位相同： r 打开文本文件进行读取，数据流位置在文件起始处 r+ 打开文本文件进行读写，数据流位置在文件起始处 w 如果文件存在，将其清零，不存在创建写入文件。数据流位置在文件起始处 w+ 打开文件进行读写，如果文件存在，将其清零，不存在创建写入文件。数据流位置在文件起始处 a 打开文件写入数据，如果文件存在，将其清零，不存在创建写入文件。数据流位置在文件结尾处，此后的写操作都将数据追加到文件后面 a+ 打开文件进行文件读写，如果文件存在，将其清零，不存在创建写入文件。数据流位置在文件结尾处，此后的写操作都将数据追加到文件后面 读取文件信息：fs.read(fd, buffer, offset, length, position, callback)文件打开后，就可以使用fs.read()方法进行读取，在读取前需要一个文件描述符fd，创建文件描述符fd可以使用fs.open()方法.而后创建一个用于保存文件数据的缓冲区。缓冲区数据最终会被传递到回调函数中;从文件描述符fd中读取文件数据。 buffer是一个缓冲区，读取的数据将会写入到这里。 offset是开始向缓冲区 buffer 写入数据时的偏移量。 length是一个整型值，指定了读取的字节数。 position是一个整型值，指读取的文件起始位置，如果position为null，将会从文件当前的位置读取数据。 callback中回调函数，其中包含了三个参数(err, bytesRead, buffer)，分别表示：错误、读取的字节数、缓冲区。fs.read()方法可以实现部分文件内容的读取。通过length和position参数可以指定读取文件内容的长度和读取内容的起始位置。示例如下： var fs = require(&apos;fs&apos;); fs.open(&apos;./test/fs.js&apos;, &apos;r&apos;, function (err, fd) { var readBuffer = new Buffer(1024), offset = 0, len = readBuffer.length, filePostion = 100; fs.read(fd, readBuffer, offset, len, filePostion, function(err, readByte){ console.log(&apos;读取数据总数：&apos;+readByte+&apos; bytes&apos; ); // ==&gt;读取数据总数：239 bytes console.log(readBuffer.slice(0, readByte)); //数据已被填充到readBuffer中 }) }); 上面的代码，文件打开后，会从第100个字节开始，读取其后的1024个字节的数据。读取完成后，fs.read()会回调最后一个回调方法，然后就可以可以处理读取到的的缓冲的数据了。 读取文件信息(另一种方式): fs.readFile(filename[, options], callback)读取文件的全部内容: filename要读取的文件。 options一个包含以下可选值的对象 encoding {String | Null} 默认：&#39;utf8&#39; mode {Number} 默认：438 (aka 0666 in Octal) flag {String} 默认：’w’ callback回调函数有2个参数 (err, data)，参数 data 是文件的内容。如果没有指定参数encoding, 则返回值为Buffer。fs.readFile()方法能且只能读取文件的全部内容，通过设置编码方式可以以字符串或Buffer的形式返回读结果。 将数据写入文件fs.write()fs.write()有以下两种形式，可以将一个buffer或data字符串写入到文件描述符fd指定的文件中。同样的在写入之前需要一个文件描述符fd,创建文件描述符fd,可以使用fs.open()方法fs.write(fd,buffer,offset,length[,position],callback)参数如下: buffer是一个缓冲区，是要写入到文件的数据。 offset用于确认buffer写入数据时的偏移量。 length是一个整型值，指定写入数据的长度。 通过offset和length可以确定buffer的哪个部分将会被写入文件。 position是一个整型值，指写入文件的起始位置，如果position为typeof position !== ‘number’，将会从文件当前的位置写入数据。 callback中回调函数，其中包含了三个参数(err, written, buffer)，分别表示：错误、写入文件的字节数、缓冲区。fs.write(fd,data[,position[,encoding]],callback) 参数如下: data要写入文件的字符串（当写入数据不是Buffer时，将会被转为字符串）。 position是一个整型值，指写入文件的起始位置，如果position为typeof position !== ‘number’，将会从文件当前的位置写入数据。 encoding指定写入字符串的编码方式。 callback中回调函数，其中包含了三个参数(err, written, buffer)，分别表示：错误、写入文件的字节数、缓冲区。提示：fs.write()在没有等待回调而多次操作同一个文件是不安全的。在这种情况下，强烈推荐使用fs.createWriteStream()方法。文件打开后，可以通过 fs.write()方法传递一个数据缓冲区，以向打开的文件中写入数据。示例如下： var fs = require(&apos;fs&apos;); fs.open(&apos;./fs.txt&apos;, &apos;a&apos;, function (err, fd) { var writeBuffer = new Buffer(&apos;这是要写入的字符串&apos;), offset = 0, len = writeBuffer.length, filePostion = null; fs.write(fd, writeBuffer, offset, len, filePostion, function(err, readByte){ console.log(&apos;写数据总数：&apos;+readByte+&apos; bytes&apos; ); // ==&gt;写数据总数：27 bytes }) }) fs.writeSync()是fs.write()方法的同步版本。 将数据写入文件(另一种方式):fs.writeFile(filename, data[, options], callback)将一个buffer或字符串写入到指定的文件中，当文件已经存在时，文件内容将会被替换。 filename要写入的文件。 data要写入的文件的数据，可以是一个buffer或字符串。 options一个包含以下可选值的对象 encoding {String | Null} ，写入数据的编码方式，默认：’utf8’。如果写入数据是buffer时，这个参数会被忽略。 mode {Number} 默认：438 (aka 0666 in Octal) flag {String} 默认：’w’当写入数据是字符串时，options参数可以是一个字符串，表示字符串编码方式，如：’utf8’。 callback回调函数有1个参数 (err)。err, 表示可能出现的错误。 文件、目录的重命名(移动) ：fs.rename() fs.rename(oldPath, newPath, callback)这是异步版本的方法，此方法可以用于文件重命名和移动文件位置，此方法也可用于目录的操作。其回调函数中包含一个参数(err)，该参数用于捕获可能出现的异常，当操作的文件或目录不存在、目标目录不存在等情况时会出现异常。示例: fs.rename(&apos;./xxx.txt&apos;, &apos;/tmp/world&apos;, function (err) { if (err) throw err; console.log(&apos;重命名完成&apos;); }) 文件的删除 fs.unlink() fs.unlink(path,callback)这是异步版本的方法,其回调函数中包含一个参数(err)，该参数用于捕获可能出现的异常，当操作的文件不存在、操作的对象是目录等情况时会出现异常。示例: fs.unlink(&apos;./itbilu.com.txt&apos;, function(err) { if (err) throw err; console.log(&apos;文件删除成功&apos;); }) 目录的删除 fs.rmdir() fs.rmdir(paht,callback)fs.unlink()只能用于文件的删除，当需要删除目录时，需要使用fs.rmdir()方法。其回调函数中包含一个参数(err)，该参数用于捕获可能出现的异常，当操作的目录不存在、操作的对象是文件、操作目录非空等情况时会出现异常。示例: fs.rmdir(&apos;/tmp/itbaidu&apos;,function(err){ if(err) throw err; console.log(&apos;目录删除成功&apos;); })","categories":[],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"http://yshunda.github.io/tags/Node-js/"}]},{"title":"自建SSR服务器教程(Vultr)","slug":"Vultr","date":"2017-09-20T12:41:13.000Z","updated":"2017-10-19T11:32:14.685Z","comments":true,"path":"2017/09/20/Vultr/","link":"","permalink":"http://yshunda.github.io/2017/09/20/Vultr/","excerpt":"","text":"前言:每次有时候在论坛里分享SS/SSR账号的后,用过一段时间后不能用了就会有人又找我求账号,我的信箱也因此经常爆满;So,授人以鱼不如授人以”渔”,这篇帖子我们以Vultr为例。(也建议:自己学习一下,求人不如求已,这样你也多了一项技能、对吧！？文章适合小白，希望你能看完) 文章概述:第一节:一些概念和原理第二节:购买VPS服务器第三节:连接部署VPS服务器第四节:加速VPS服务器（谷歌BBR加速，推荐）第五节:全平台翻墙指南 第一节:一些概念和原理Shadowsocks(SS)是什么? Shadowsocks是由若干人因为兴趣而制作的一个项目，主要开发者和领导者是@clowwindy其作用是加密传输资料。但是也正因为它加密传输资料的特性，使得 GFW 无法精准识别，经由它传输的资料和其它普通资料的区别（如上图）。但是在2015年下半年 被“相关部门”约谈喝茶，于是被迫删除Github的源码及相关文档。 但Shadowsocks属于开源项目，所以删除前已经有人备份，同时由另一批志愿者跟进维护原版 Shadowsocks 客户端，而由此衍生的基于Shadowsocks项目的第三方项目有：ShadowsocksR、Shadowsocks-qt5、ShadowsocksCap等。 ShadowsocksR(SSR)是什么?Shadowsocks RSS,也叫SSR,是由破娃酱开发的加强版的Shadowsocks(SS)。它增加了混淆和协议两个主要功能来达到防止某墙的重放攻击和躲避QoS。虽然某墙在检测Shadowsocks(SS)流量时并不一定能认出这个到底是属于什么类型的流量，从而有可能被QoS。 补充:QoS (Quality of Service)，原本用于路由器上对某种类型的网络流量进行权重分配从而达到较好的网络使用情况。打个比方，在家里，网络电话以及游戏流量的权重较高，如果QoS分配给他们的宽带有一定高权重的情况下，即使还有一个人疯狂下载，也能保证网络电话和游戏这俩Services的流畅性（通过牺牲部分下载速度）。此处，某墙可能在部分封锁严重的地区会对SS流量进行QoS限速，但不是出于保障其他流量流畅性的目的。但如果在无QoS监视地区使用SSR，则有可能会造成访问速度上的下降。 什么是 VPS 和 Vultr?虚拟专用伺服务器(英语:Virtual private server,缩写为 VPS),是将一台服务器分割成多个虚拟专享服务器的一项技术。实现vps的技术分为容器技术和虚拟化技术。在容器或虚拟机中，每一个vps都可以分配独立公网IP地址、独立的操作系统、实现不同不同vps之间磁盘空间/内存/CPU资源/进程和系统配置的隔离,从而为用户和应用程序模拟出”独享”使用计算机资源的体验。也就是说每个VPS可以像独立服务器一样，重装操作系统，安装程序，单独重启服务器。 Vultr是一家国际知名的的VPS租赁服务商,也是现在使用人数较多的VPS服务商之一,关于其优劣可查阅此篇文章“vultr vps服务器存在的7个优势及选择原因”;与之相媲美的是搬瓦工,之前推出的$3.99美元一年的套餐,现已成为了”传家宝”。 什么是 Linux 和 SSH?Linux是一套开源的类似Unix操作的,支持多用户/多任务/多线程和多CPU的免费开源操作系统。它被世界上大半多服务器所采用,有大量优秀的开源软件可以安装。但是Linux没有像window一样有图形化用户界面(GUI),想要操作Linux系统需要学习一些常用的命令行(CLI命令),想深入学习Linux系统的小伙伴推荐这个网站(我也在这个上面学习中….)鳥哥的Linux私房菜,这里列举一些常用操作： pwd 打印当前文件夹的路径 cd 改变目录, 相当于 windows 下的打开文件夹 ls 展示当前目录下的所有文件内容 mkdir 创建目录, 创建文件夹 rmdir 删除文件夹 touch 创建文件 rm 删除文件 cat 原意是指将文件与终端输出流连接, 通俗的说输出文件内容 less 或 more( Unix ) 命令可以分页的打开文件, 注意使用 q 退出 echo 命令 打印 &gt; 重定向, 如果文件存在, 则将文件截断, 并重新输入. &gt;&gt; 重定向. 不截断重定向 ipconfig/all 查看ip信息 ping IP地址 查看是否连接成功 tips: 注意: 换行问题:在 linux 中使用 \\n 表示换行;在 windows 中使用 \\r\\n 表示换行 注意:文件截断是指将文件的所有内容删除, 但是文件的创建时间等信息不更改 SSH是一种网络协议,主要用于计算机之间的加密登录。例如：如果一个用户从本地计算机，使用SSH协议登录另一台远程计算机，我们就可以认为，这种登录时安全的，即使被中途截获密码也不会被泄露。所以，你购买了一台VPS服务器为它安装了Linux系统后，只要借助一些工具，就可以用 SSH 在你自己的 Mac/Windows电脑上(Xshell)远程登录该 VPS 了。 第二节:购买VPS服务器点击注册Vultr注册后,确认邮件激活账号，充值后即可购买服务器。充值方式是paypal或支付宝(2017年8月30日Vutrl支持支付宝付款，最低充值10美元即70元左右），使用paypal有信用卡即可。paypal注册地址：https://www.paypal.com （paypal是国际知名的第三方支付服务商，相当于国内的支付宝。注册一下账号，绑定信用卡即可购买国外商品）。注册并充值完，在左边选择”Server”标签，点击右边的”加号”部署新的服务器 购买vps服务器时，服务器地址优先选择：美国硅谷（Silicon Valley）、美国达拉斯(Dallas)其次是美国洛杉矶(Los Angeles)和日本(Tokyo)的服务器 系统类型选择CentOS6X64位的系统(系统版本不要选的太高，不要选centos7！centos7默认的防火墙可能会干扰SSR的正常连接！) 根据自己的需求付款就好了,如果只供个人科学上网用的话，$5 绰绰有余。(如果你还想干其它的,那就高配置) 剩下都可以使用默认值。最后一项你可以根据自身需求来自定义服务器的名字和标签，以方便区分。 第三节:连接部署VPS服务器连接服务器接下来部署服务器需要一个”SSH客户端”,上文我们在介绍SSH有提到过,如果你是Mac OS X系统请阁下自行搜索连接远程VPS的”SSH客户端” Xshell windows版下载地址：百度软件中心Xshell 接下来连接服务器:依次点击”文件”→”新建” 软件会先后提醒你输入用户名和密码，linux系统用户名默认都是root，密码是购买服务器后的cent系统的密码 出现如下图即表示链接成功了 部署服务器(脚本一)脚本一: yum -y install wget wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocksR.sh chmod +x shadowsocksR.sh ./shadowsocksR.sh 2&gt;&amp;1 | tee shadowsocksR.log 复制上面的代码,粘贴进Xshell后按回车,会依次出现如下界面: 一路按”回车”后,出现如下界面即表示部署成功: 脚本一是无法修改密码/端口的,倘若要执意修改需要重新部署一遍,显得稍有些繁琐,若有此需求的小伙伴可以用脚本二方便以后想修改密码、端口什么的，而且功能更多 部署服务器(脚本二)脚本二: CentOS/Debian/Ubuntu ShadowsocksR单/多端口一键管理脚本： yum -y install wget wget -N --no-check-certificate https://softs.fun/Bash/ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh 备用地址: yum -y install wget wget -N --no-check-certificate https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/ssr.sh &amp;&amp; chmod +x ssr.sh &amp;&amp; bash ssr.sh 复制以上代码,粘贴进Xshell(如果你之前有安装过,请先执行”3”,将其卸载,再执行”1”) 之后跟脚本一的设置基本是一样,就不一一截图赘述,出现下图即成功了: 第四节:加速VPS服务器(谷歌BBR加速，推荐)服务器搭好了,使用过程中可能会出现不稳定的情况,同时加速后一般速度也会有明显的提升,建议部署加速脚本。Vultr采用的框架可以装BBR加速,我们来部署谷歌BBR加速脚本：，将下面脚本复制进Xshell yum -y install wget wget --no-check-certificate https://github.com/teddysun/across/raw/master/bbr.sh chmod +x bbr.sh ./bbr.sh 一路按回车后，出现如下界面：”输入y” 至此加速完毕! 第五节:全平台翻墙指南(SSR)window SSR客户端 下载地址 Mac OS X SSR客户端 下载地址 Android SSR客户端 下载地址 IOS SSR客户端 推荐使用Shadowrocket俗称”小火箭” 但是其虽然在国区appstore下架,但是作者@Shadowrocket在其推特上发布了TestFlight申请,如果名额已满的话(当时我申请时名额未满),就只有去美区购买吧 持续更新补充中…….","categories":[],"tags":[{"name":"VPS","slug":"VPS","permalink":"http://yshunda.github.io/tags/VPS/"}]}]}