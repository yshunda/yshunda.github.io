{"meta":{"title":"大蓝鲸","subtitle":"不积硅步.无以致千里","description":null,"author":"大蓝鲸","url":"http://yshunda.net"},"pages":[{"title":"tags","date":"2017-09-20T12:34:31.000Z","updated":"2017-09-20T12:38:04.282Z","comments":false,"path":"tags/index.html","permalink":"http://yshunda.net/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2017-09-20T12:41:13.000Z","updated":"2017-09-20T13:03:37.653Z","comments":false,"path":"categories/index.html","permalink":"http://yshunda.net/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"Node.js学习笔记(一)","slug":"Node.js01","date":"2017-09-23T13:37:48.000Z","updated":"2017-09-28T04:34:14.376Z","comments":true,"path":"2017/09/23/Node.js01/","link":"","permalink":"http://yshunda.net/2017/09/23/Node.js01/","excerpt":"","text":"title: Node.js学习笔记(一) date: 2017-09-23 21:37:48 descriptions: 写博客记录,也是一个知识沉淀的过程.你好你说的就分手手机的身份地方好私服放松放松绥芬河素合肥的随和哈哈就是毒防毒的说法 Node,js是什么a.Node.js是一个采用C++语言编写而成的,一个后端的Javascript运行环境（支持的系统包括*nux、Windows）,它不是一个javascript应用.b.Node.js采用了Google Chrome浏览器的V8引擎，性能很好，同时还提供了很多系统级的API，如文件操作、网络编程(包括HTTP、DNS、NET、UDP、HTTPS、TLS等)等.c.Node.js的设计特点是以事件驱动为核心,采用异步编程的设计思想.也就是说我们使用过程中引入了了相应的模块以后,需要根据自己的业务逻辑注册相应的回调函数.这些回调函数都是异步执行的,这意味着虽然在代码结构中,这些函数看似是依次注册的,但是它们并不依赖自身出现的顺序,而是等待相应的事件触发. Node.js发展简史2009年2月，Ryan Dahl在博客上宣布准备基于V8创建一个轻量级的Web服务器并提供一套库。2009年5月，Ryan Dahl在GitHub上发布了最初版本的部分Node.js包，随后几个月里，有人开始使用Node.js开发应用。2009年11月和2010年4月，两届JSConf大会都安排了Node.js的讲座。2010年年底，Node.js获得云计算服务商Joyent资助，创始人Ryan Dahl加入Joyent全职负责Node.js的发展。2011年7月，Node.js在微软的支持下发布Windows版本。2012年1月，达尔离开了Node.js项目，开发工作由他的同事以及npm创始人艾萨克·施吕特（Isaac Schlueter）继续主持。2014年2月，蒂莫西·费里斯（Timothy J. Fontaine）接任项目主管。 Node.js开发对象类型 核心模块 全局对象 第三方对象 ( 自己写的/ npmJS官网上下载的)Node.js核心模块 使用方法:”声明引入对象” 例如:引入文件操作对象cosnt fs = require(&#39;fs&#39;) 注意:所有的API都提供了同步和异步的两个版本， 同步会阻塞后续代码执行 异步不会阻塞后续代码执行，nodejs官方建议我们更多的使用异步的Node.js全局对象 setTimeout console 控制台 process 代表当前启动Node程序的进程 process属性 argv 获取命令行的所有参数,默认是字符串形式,中间以空格分隔 env 获取当前系统环境变量 process相关函数 process.pid 获取进程id process.kill Node.js第三方对象 待定内容Node.js核心模块之fs模块 fs模块中提供了重命名（移动）文件或目录方法：fs.rename()，删除文件的方法：fs.unlink()，删除目录的方法：fs. rmdir()。这几个方法都有对应的同步版本方法：fs.renameSync()、fs.unlinkSync()和fs.rmdirSync()。fs模块中的所有方法，都更推荐使用其同步版本，因为在任务量较大时异步版本会造成进程阻塞。另外，同步版本的方法需要使用trytry进行异常捕获，在使用上没有异步方法便利。 ######文件、目录的重命名（移动）：fs.rename() fs.rename(oldPath, newPath, callback)这是异步版本的方法，此方法可以用于文件重命名和移动文件位置，此方法也可用于目录的操作。其回调函数中包含一个参数(err)，该参数用于捕获可能出现的异常，当操作的文件或目录不存在、目标目录不存在等情况时会出现异常。示例: 1234fs.rename(&apos;./xxx.txt&apos;, &apos;/tmp/world&apos;, function (err) &#123; if (err) throw err; console.log(&apos;重命名完成&apos;);&#125;); ######文件的删除 fs.unlink() fs.unlink(path,callback)这是异步版本的方法,其回调函数中包含一个参数(err)，该参数用于捕获可能出现的异常，当操作的文件不存在、操作的对象是目录等情况时会出现异常。示例: 1234fs.unlink(&apos;./itbilu.com.txt&apos;, function(err) &#123; if (err) throw err; console.log(&apos;文件删除成功&apos;);&#125;);","categories":[],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"http://yshunda.net/tags/Node-js/"}]}]}