{"meta":{"title":"大蓝鲸","subtitle":"不积硅步.无以致千里","description":null,"author":"大蓝鲸","url":"http://yshunda.net"},"pages":[{"title":"tags","date":"2017-09-20T12:34:31.000Z","updated":"2017-09-20T12:38:04.282Z","comments":false,"path":"tags/index.html","permalink":"http://yshunda.net/tags/index.html","excerpt":"","text":""},{"title":"categories","date":"2017-09-20T12:41:13.000Z","updated":"2017-09-20T13:03:37.653Z","comments":false,"path":"categories/index.html","permalink":"http://yshunda.net/categories/index.html","excerpt":"","text":""}],"posts":[{"title":"Node.js学习笔记(一)","slug":"Node.js_A","date":"2017-09-23T13:37:48.000Z","updated":"2017-09-29T12:14:35.909Z","comments":true,"path":"2017/09/23/Node.js_A/","link":"","permalink":"http://yshunda.net/2017/09/23/Node.js_A/","excerpt":"","text":"title: Node.js学习笔记(一) date: 2017-09-23 21:37:48 descriptions: 写博客记录,也是一个知识沉淀的过程.你好你说的就分手手机的身份地方好私服放松放松绥芬河素合肥的随和哈哈就是毒防毒的说法 Node,js是什么a.Node.js是一个采用C++语言编写而成的,一个后端的Javascript运行环境（支持的系统包括*nux、Windows）,它不是一个javascript应用.b.Node.js采用了Google Chrome浏览器的V8引擎，性能很好，同时还提供了很多系统级的API，如文件操作、网络编程(包括HTTP、DNS、NET、UDP、HTTPS、TLS等)等.c.Node.js的设计特点是以事件驱动为核心,采用异步编程的设计思想.也就是说我们使用过程中引入了了相应的模块以后,需要根据自己的业务逻辑注册相应的回调函数.这些回调函数都是异步执行的,这意味着虽然在代码结构中,这些函数看似是依次注册的,但是它们并不依赖自身出现的顺序,而是等待相应的事件触发. Node.js发展简史2009年2月，Ryan Dahl在博客上宣布准备基于V8创建一个轻量级的Web服务器并提供一套库。2009年5月，Ryan Dahl在GitHub上发布了最初版本的部分Node.js包，随后几个月里，有人开始使用Node.js开发应用。2009年11月和2010年4月，两届JSConf大会都安排了Node.js的讲座。2010年年底，Node.js获得云计算服务商Joyent资助，创始人Ryan Dahl加入Joyent全职负责Node.js的发展。2011年7月，Node.js在微软的支持下发布Windows版本。2012年1月，达尔离开了Node.js项目，开发工作由他的同事以及npm创始人艾萨克·施吕特（Isaac Schlueter）继续主持。2014年2月，蒂莫西·费里斯（Timothy J. Fontaine）接任项目主管。 Node.js开发对象类型 核心模块 全局对象 第三方对象 ( 自己写的/ npmJS官网上下载的) Node.js核心模块 使用方法:”声明引入对象” 例如:引入文件操作对象cosnt fs = require(&#39;fs&#39;) 注意:所有的API都提供了同步和异步的两个版本， 同步会阻塞后续代码执行 异步不会阻塞后续代码执行，nodejs官方建议我们更多的使用异步的 Node.js全局对象 setTimeout console 控制台 process 代表当前启动Node程序的进程 process属性 argv 获取命令行的所有参数,默认是字符串形式,中间以空格分隔 env 获取当前系统环境变量 process相关函数 process.pid 获取进程id process.kill Node.js第三方对象 待定内容 Node.js核心模块之文件系统模块fs fs（File System）是Node.js提供的对文件进行操作的模块，它提供了一组类似UNIX（POSIX）标准的文件操作API,这些模块中的方法均有异步和同步版本.利用fs模块,可以查询文件的统计信息/打开关闭文件/读写文件等.接下来介绍一些fs模块的常用功能: 查询文件信息:fs.stat(path,callback)fs.stat()方法用于查询文件信息，可以用于查询文件的大小、创建时间、权限等相关信息。fs.stat()是异步方法，还有一个同步方法fs.statSync(path)。示例如下： 1234var fs = require('fs');fs.stat('test.js', function (err, stats) &#123; console.log(stats);&#125;) 返回结果如下: 12345678910111213&#123; dev: 16777220, mode: 33188, nlink: 1, uid: 501, gid: 20, rdev: 0, blksize: 4096, ino: 78808297, size: 244, blocks: 8, atime: Wed May 27 2015 18:24:43 GMT+0800 (CST), mtime: Wed May 27 2015 18:26:25 GMT+0800 (CST), ctime: Wed May 27 2015 18:26:25 GMT+0800 (CST) &#125; fs.stat(path)执行后，会将stats类的实例返回给其回调函数。可以通过stats类中的提供方法判断文件的相关属性。例如判断是否为文件： 1234var fs = require('fs');fs.stat('test.js', function (err, stats) &#123; console.log(stats.isFile()); //true&#125;) stats类中的方法有： -stats.isFile() 如果是标准文件，返回true。是目录、套接字、符号连接、或设备等返回false -stats. isDirectory() 如果是目录，返回true -stats. isBlockDevice() 如果是块设备，返回true，大多数情况下类UNIX系统的块设备都位于/dev目录下 -stats. isCharacterDevice() 如果是字符设备，返回true -stats. isSymbolicLink() 如果是符号连接，返回true。（fs.lstat()方法返回的stats对象才有此方法） -stats.isFIFO() 如果是FIFO，返回true。FIFO是UNIX中的一种特殊类型的命令管道 -stats. isSocket() 如果是UNIX套接字，返回true 打开文件：fs.open(path, flags[, mode], callback) 文件、目录的重命名(移动) ：fs.rename() fs.rename(oldPath, newPath, callback)这是异步版本的方法，此方法可以用于文件重命名和移动文件位置，此方法也可用于目录的操作。其回调函数中包含一个参数(err)，该参数用于捕获可能出现的异常，当操作的文件或目录不存在、目标目录不存在等情况时会出现异常。示例: 1234fs.rename('./xxx.txt', '/tmp/world', function (err) &#123; if (err) throw err; console.log('重命名完成');&#125;); 文件的删除 fs.unlink() fs.unlink(path,callback)这是异步版本的方法,其回调函数中包含一个参数(err)，该参数用于捕获可能出现的异常，当操作的文件不存在、操作的对象是目录等情况时会出现异常。示例: 1234fs.unlink(&apos;./itbilu.com.txt&apos;, function(err) &#123; if (err) throw err; console.log(&apos;文件删除成功&apos;);&#125;); 目录的删除 fs.rmdir() fs.rmdir(paht,callback)fs.unlink()只能用于文件的删除，当需要删除目录时，需要使用fs.rmdir()方法。其回调函数中包含一个参数(err)，该参数用于捕获可能出现的异常，当操作的目录不存在、操作的对象是文件、操作目录非空等情况时会出现异常。示例: 1234fs.rmdir(&apos;/tmp/itbaidu&apos;,function(err)&#123; if(err) throw err; console.log(&apos;目录删除成功&apos;);&#125;); 回到顶部","categories":[],"tags":[{"name":"Node.js","slug":"Node-js","permalink":"http://yshunda.net/tags/Node-js/"}]}]}